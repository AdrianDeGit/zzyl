/**
 * 实体类代码生成模板
 * 
 * 此模板使用Apache Velocity模板引擎编写，用于根据数据库表结构生成Java实体类。
 * 支持基本CRUD实体、树形结构实体和包含子表的实体。
 */
package ${packageName}.domain;

#foreach ($import in $importList)
// 导入所需的类，$importList由上下文动态提供
import ${import};
#end
// Apache Commons库的ToString构建器，用于自动生成toString方法
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
// 自定义Excel导出注解，用于数据导出功能
import com.zzyl.common.annotation.Excel;
#if($table.crud || $table.sub)
// 导入基础实体类，适用于支持CRUD操作的表
import com.zzyl.common.core.domain.BaseEntity;
#elseif($table.tree)
// 导入树形实体类，适用于树形结构的表
import com.zzyl.common.core.domain.TreeEntity;
#end

/**
 * ${functionName}对象 ${tableName}
 *
 * @author ${author}
 * @date ${datetime}
 */
    #if($table.crud || $table.sub)
        #set($Entity="BaseEntity")  // 设置基类为BaseEntity
    #elseif($table.tree)
        #set($Entity="TreeEntity")  // 设置基类为TreeEntity
    #end
        public class ${ClassName} extends ${Entity}
        {
        // 序列化版本号，确保序列化兼容性
        private static final long serialVersionUID = 1L;

    #foreach ($column in $columns)
        #if(!$table.isSuperColumn($column.javaField))
                /** $column.columnComment */  // 字段注释，来自数据库表结构
            #if($column.list)
                #set($parentheseIndex=$column.columnComment.indexOf("（"))
                    // 处理列注释中的括号，提取主要注释内容
                #if($parentheseIndex != -1)
                    #set($comment=$column.columnComment.substring(0, $parentheseIndex))
                #else
                    #set($comment=$column.columnComment)
                #end
                    // 根据列类型和注释配置Excel导出注解
                #if($parentheseIndex != -1)
                @Excel(name = "${comment}", readConverterExp = "$column.readConverterExp()")
                #elseif($column.javaType == 'Date')
                @JsonFormat(pattern = "yyyy-MM-dd")
                @Excel(name = "${comment}", width = 30, dateFormat = "yyyy-MM-dd")
                #else
                @Excel(name = "${comment}")
                #end
            #end
        private $column.javaType $column.javaField;  // 实体类字段定义

        #end
    #end
    #if($table.sub)
            /** $table.subTable.functionName信息 */  // 子表数据集合
            private List<${subClassName}> ${subclassName}List;

    #end
    #foreach ($column in $columns)
        #if(!$table.isSuperColumn($column.javaField))
                // 智能处理属性名首字母大写（考虑特殊情况如ID）
            #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
                #set($AttrName=$column.javaField)
            #else
                #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
            #end
                // 字段的setter方法
                public void set${AttrName}($column.javaType $column.javaField) {
                    this.$column.javaField = $column.javaField;
                }

                // 字段的getter方法
                public $column.javaType get${AttrName}() {
                    return $column.javaField;
                }

        #end
    #end
    #if($table.sub)
            // 子表数据的getter方法
            public List<${subClassName}> get${subClassName}List() {
                return ${subclassName}List;
            }

            // 子表数据的setter方法
            public void set${subClassName}List(List<${subClassName}> ${subclassName}List) {
                this.${subclassName}List = ${subclassName}List;
            }

    #end
        // 重写toString方法，使用ToStringBuilder自动生成格式化输出
        @Override
        public String toString() {
            return new ToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE)
                #foreach ($column in $columns)
                        // 动态添加所有字段到toString输出
                            #if($column.javaField.length() > 2 && $column.javaField.substring(1,2).matches("[A-Z]"))
                                #set($AttrName=$column.javaField)
                            #else
                                #set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
                            #end
                .append("${column.javaField}", get${AttrName}())
                #end
                #if($table.sub)
                        .append("${subclassName}List", get${subClassName}List())
                        #end
                    .toString();
        }
}